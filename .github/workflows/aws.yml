# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: us-east-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: spring-be           # set this to your Amazon ECR repository name
  ECS_SERVICE: springboot-qa                # set this to your Amazon ECS service name
  ECS_CLUSTER: ecs-infra-qa                  # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: springboot-qa           # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: springboot-qa                # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: s3 list
      run: aws s3 ls

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: $GITHUB_RUN_NUMBER
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Get current task definition
      id: get_task
      run: |
        # Use AWS CLI to get the current task definition JSON
        # and save it as an output for later use.
        echo ::set-output name=taskdef::$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].taskDefinition' --output text)

    - name: Update task definition image
      id: update_image
      run: |
        # Get the existing task definition JSON
        TASK_DEF="$((echo ${{ steps.get_task.outputs.taskdef }}) | tr -d '[:space:]')"
          
        # Update the image tag in the task definition JSON
        NEW_IMAGE=$IMAGE_TAG
        NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg newimage $NEW_IMAGE '.containerDefinitions[0].image=$newimage')

        echo $NEW_TASK_DEF > updated_taskdef.json
        cat updated_taskdef.json
          
    - name: Register new task definition
      id: register_task
      run: |
        # Register the updated task definition
        NEW_TASK_DEF_FILE=updated_taskdef.json
        REGISTERED_ARN=$(aws ecs register-task-definition --cli-input-json file://$NEW_TASK_DEF_FILE --query 'taskDefinition.taskDefinitionArn' --output text)
        echo ::set-output name=task_arn::$REGISTERED_ARN

    - name: Update ECS service
      run: |
        # Update the ECS service with the new task definition
        NEW_TASK_DEF_ARN=${{ steps.register_task.outputs.task_arn }}
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_DEF_ARN
